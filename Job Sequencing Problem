/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
     static bool cmp(Job& a, Job& b){
        return a.dead < b.dead;
    }
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
  sort(arr, arr+n, cmp);
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i=0; i<n; ++i){
            if(arr[i].dead > pq.size()){
                pq.push(arr[i].profit);
            }
            else{
                if(pq.top() < arr[i].profit){
                    pq.pop();
                    pq.push(arr[i].profit);
                }
            }
        }
        int count = pq.size();
        int gain = 0;
        while(!pq.empty()){
            gain += pq.top();
            pq.pop();
        }
        return {count, gain};  
    } 
};
