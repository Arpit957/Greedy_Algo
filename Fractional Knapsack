//class implemented
/*
struct Item{
    int value;
    int weight;
};
*/


class Solution
{
    static bool cmp(pair<double,Item>a,pair<double,Item>b){
        return a.first > b.first;
    }
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        
        vector< pair<double,Item> >v;
        
        for(int i =0;i<n;i++){
            
            double perunitvalue = (1.0 * arr[i].value )/ arr[i].weight;
            
            pair<double,Item> p = make_pair(perunitvalue,arr[i]);
            
            v.push_back(p);
        }
        
        sort(v.begin(),v.end(),cmp);
        
        double totalvalue = 0.0;
        
        for(int i =0;i<n;i++){
            if(v[i].second.weight > W){
                //can tak fraction amount
                totalvalue += W*v[i].first;
                W = 0;
            }
            else{
                //can take full amount
                totalvalue+=v[i].second.value;
                W = W - v[i].second.weight;
            }
        }
        
        return totalvalue;
    }
        
};
